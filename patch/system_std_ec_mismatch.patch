qdiff --git a/boost/system/detail/config.hpp b/boost/system/detail/config.hpp
index 2ad8201..ab1f304 100644
--- a/boost/system/detail/config.hpp
+++ b/boost/system/detail/config.hpp
@@ -22,6 +22,11 @@
 # undef BOOST_SYSTEM_HAS_SYSTEM_ERROR
 #endif

+#if defined(BOOST_NO_CXX11_HDR_MUTEX)
+// Required for thread-safe map manipulation
+# undef BOOST_SYSTEM_HAS_SYSTEM_ERROR
+#endif
+
 // BOOST_SYSTEM_NOEXCEPT
 // Retained for backward compatibility

diff --git a/boost/system/detail/std_interoperability.hpp b/boost/system/detail/std_interoperability.hpp
index b1b41d3..a6ec728 100644
--- a/boost/system/detail/std_interoperability.hpp
+++ b/boost/system/detail/std_interoperability.hpp
@@ -10,6 +10,7 @@
 #include <system_error>
 #include <map>
 #include <memory>
+#include <mutex>

 //

@@ -30,8 +31,20 @@ private:

 public:

-    explicit std_category( boost::system::error_category const * pc ): pc_( pc )
+    explicit std_category( boost::system::error_category const * pc, unsigned id ): pc_( pc )
     {
+        if( id != 0 )
+        {
+#if defined(_MSC_VER) && defined(_CPPLIB_VER) && _MSC_VER >= 1900 && _MSC_VER < 2000
+
+            // Poking into the protected _Addr member of std::error_category
+            // is not a particularly good programming practice, but what can
+            // you do
+
+            _Addr = id;
+
+#endif
+        }
     }

     virtual const char * name() const BOOST_NOEXCEPT
@@ -53,24 +66,50 @@ public:
     virtual bool equivalent( const std::error_code & code, int condition ) const BOOST_NOEXCEPT;
 };

+inline std::error_category const & to_std_category( boost::system::error_category const & cat ) BOOST_SYMBOL_VISIBLE;
+
+struct cat_ptr_less
+{
+    bool operator()( boost::system::error_category const * p1, boost::system::error_category const * p2 ) const BOOST_NOEXCEPT
+    {
+        return *p1 < *p2;
+    }
+};
+
 inline std::error_category const & to_std_category( boost::system::error_category const & cat )
 {
-    typedef std::map< boost::system::error_category const *, std::unique_ptr<std_category> > map_type;
+    if( cat == boost::system::system_category() )
+    {
+        static const std_category system_instance( &cat, 0x1F4D7 );
+        return system_instance;
+    }
+    else if( cat == boost::system::generic_category() )
+    {
+        static const std_category generic_instance( &cat, 0x1F4D3 );
+        return generic_instance;
+    }
+    else
+    {
+        typedef std::map< boost::system::error_category const *, std::unique_ptr<std_category>, cat_ptr_less > map_type;

-    static map_type map_;
+        static map_type map_;
+        static std::mutex map_mx_;

-    map_type::iterator i = map_.find( &cat );
+        std::lock_guard<std::mutex> guard( map_mx_ );

-    if( i == map_.end() )
-    {
-        std::unique_ptr<std_category> p( new std_category( &cat ) );
+        map_type::iterator i = map_.find( &cat );

-        std::pair<map_type::iterator, bool> r = map_.insert( map_type::value_type( &cat, std::move( p ) ) );
+        if( i == map_.end() )
+        {
+            std::unique_ptr<std_category> p( new std_category( &cat, 0 ) );

-        i = r.first;
-    }
+            std::pair<map_type::iterator, bool> r = map_.insert( map_type::value_type( &cat, std::move( p ) ) );

-    return *i->second;
+            i = r.first;
+        }
+
+        return *i->second;
+    }
 }

 inline bool std_category::equivalent( int code, const std::error_condition & condition ) const BOOST_NOEXCEPT
diff --git a/libs/system/test/Jamfile.v2 b/libs/system/test/Jamfile.v2
index 1648d46..b428ca0 100644
--- a/libs/system/test/Jamfile.v2
+++ b/libs/system/test/Jamfile.v2
@@ -10,11 +10,6 @@

 import testing ;

-lib throw_test : throw_test.cpp : <link>shared:<define>THROW_DYN_LINK=1 ;
-
-lib single_instance_lib1 : single_instance_1.cpp : <link>shared:<define>SINGLE_INSTANCE_DYN_LINK ;
-lib single_instance_lib2 : single_instance_2.cpp : <link>shared:<define>SINGLE_INSTANCE_DYN_LINK ;
-
 rule system-run ( sources + )
 {
     local result ;
@@ -32,6 +27,8 @@ system-run error_code_test.cpp ;
 system-run error_code_user_test.cpp ;
 system-run system_error_test.cpp ;

+lib throw_test : throw_test.cpp : <link>shared:<define>THROW_DYN_LINK=1 ;
+
 run dynamic_link_test.cpp throw_test : : : <link>shared : throw_test_shared ;

 system-run initialization_test.cpp ;
@@ -42,6 +39,9 @@ run config_test.cpp : : : <test-info>always_show_run_output ;
 system-run std_interop_test.cpp ;
 system-run std_mismatch_test.cpp ;

+lib single_instance_lib1 : single_instance_1.cpp : <link>shared:<define>SINGLE_INSTANCE_DYN_LINK ;
+lib single_instance_lib2 : single_instance_2.cpp : <link>shared:<define>SINGLE_INSTANCE_DYN_LINK ;
+
 system-run single_instance_test.cpp single_instance_1.cpp single_instance_2.cpp ;
 run single_instance_test.cpp single_instance_lib1 single_instance_lib2 : : : <link>static : single_instance_lib_static ;
 run single_instance_test.cpp single_instance_lib1 single_instance_lib2 : : : <link>shared : single_instance_lib_shared ;
@@ -62,3 +62,10 @@ system-run failed_constexpr_test.cpp ;
 run quick.cpp ;

 run warnings_test.cpp : : : <warnings>all <warnings-as-errors>on <toolset>gcc:<cxxflags>-Wnon-virtual-dtor <toolset>clang:<cxxflags>-Wnon-virtual-dtor ;
+
+lib std_single_instance_lib1 : std_single_instance_1.cpp : <link>shared:<define>STD_SINGLE_INSTANCE_DYN_LINK ;
+lib std_single_instance_lib2 : std_single_instance_2.cpp : <link>shared:<define>STD_SINGLE_INSTANCE_DYN_LINK ;
+
+system-run std_single_instance_test.cpp std_single_instance_1.cpp std_single_instance_2.cpp ;
+run std_single_instance_test.cpp std_single_instance_lib1 std_single_instance_lib2 : : : <link>static : std_single_instance_lib_static ;
+run std_single_instance_test.cpp std_single_instance_lib1 std_single_instance_lib2 : : : <link>shared <define>STD_SINGLE_INSTANCE_SHARED : std_single_instance_lib_shared ;
diff --git a/libs/system/test/std_single_instance_1.cpp b/libs/system/test/std_single_instance_1.cpp
new file mode 100644
index 0000000..6986146
--- /dev/null
+++ b/libs/system/test/std_single_instance_1.cpp
@@ -0,0 +1,40 @@
+
+// Copyright 2019 Peter Dimov.
+// Distributed under the Boost Software License, Version 1.0.
+
+#include <boost/config.hpp>
+
+#if defined(STD_SINGLE_INSTANCE_DYN_LINK)
+# define EXPORT BOOST_SYMBOL_EXPORT
+#else
+# define EXPORT
+#endif
+
+#include <boost/system/error_code.hpp>
+
+#if defined(BOOST_SYSTEM_HAS_SYSTEM_ERROR)
+
+#include <system_error>
+
+namespace lib1
+{
+
+EXPORT std::error_code get_system_code()
+{
+    return boost::system::error_code( 0, boost::system::system_category() );
+}
+
+EXPORT std::error_code get_generic_code()
+{
+    return boost::system::error_code( 0, boost::system::generic_category() );
+}
+
+} // namespace lib1
+
+#else
+
+EXPORT void lib1_f()
+{
+}
+
+#endif
diff --git a/libs/system/test/std_single_instance_2.cpp b/libs/system/test/std_single_instance_2.cpp
new file mode 100644
index 0000000..960b3ca
--- /dev/null
+++ b/libs/system/test/std_single_instance_2.cpp
@@ -0,0 +1,40 @@
+
+// Copyright 2019 Peter Dimov.
+// Distributed under the Boost Software License, Version 1.0.
+
+#include <boost/config.hpp>
+
+#if defined(STD_SINGLE_INSTANCE_DYN_LINK)
+# define EXPORT BOOST_SYMBOL_EXPORT
+#else
+# define EXPORT
+#endif
+
+#include <boost/system/error_code.hpp>
+
+#if defined(BOOST_SYSTEM_HAS_SYSTEM_ERROR)
+
+#include <system_error>
+
+namespace lib2
+{
+
+EXPORT std::error_code get_system_code()
+{
+    return boost::system::error_code( 0, boost::system::system_category() );
+}
+
+EXPORT std::error_code get_generic_code()
+{
+    return boost::system::error_code( 0, boost::system::generic_category() );
+}
+
+} // namespace lib2
+
+#else
+
+EXPORT void lib2_f()
+{
+}
+
+#endif
diff --git a/libs/system/test/std_single_instance_test.cpp b/libs/system/test/std_single_instance_test.cpp
new file mode 100644
index 0000000..c5fe710
--- /dev/null
+++ b/libs/system/test/std_single_instance_test.cpp
@@ -0,0 +1,76 @@
+
+// Copyright 2019 Peter Dimov.
+// Distributed under the Boost Software License, Version 1.0.
+
+#include <boost/system/error_code.hpp>
+#include <boost/config/pragma_message.hpp>
+#include <boost/config/helper_macros.hpp>
+
+#if !defined(BOOST_SYSTEM_HAS_SYSTEM_ERROR)
+
+BOOST_PRAGMA_MESSAGE( "BOOST_SYSTEM_HAS_SYSTEM_ERROR not defined, test will be skipped" )
+int main() {}
+
+#elif defined(STD_SINGLE_INSTANCE_SHARED) && defined(__CYGWIN__)
+
+BOOST_PRAGMA_MESSAGE( "Skipping Windows/DLL test, __CYGWIN__" )
+int main() {}
+
+#elif defined(STD_SINGLE_INSTANCE_SHARED) && defined(_WIN32) && !defined(_MSC_VER)
+
+BOOST_PRAGMA_MESSAGE( "Skipping Windows/DLL test, no _MSC_VER" )
+int main() {}
+
+#elif defined(STD_SINGLE_INSTANCE_SHARED) && defined(_WIN32) && !defined(_CPPLIB_VER)
+
+BOOST_PRAGMA_MESSAGE( "Skipping Windows/DLL test, no _CPPLIB_VER" )
+int main() {}
+
+#elif defined(STD_SINGLE_INSTANCE_SHARED) && defined(_WIN32) && (_MSC_VER < 1900 || _MSC_VER >= 2000)
+
+BOOST_PRAGMA_MESSAGE( "Skipping Windows/DLL test, _MSC_VER is " BOOST_STRINGIZE(_MSC_VER) )
+int main() {}
+
+#else
+
+#include <boost/core/lightweight_test.hpp>
+#include <system_error>
+
+using namespace boost::system;
+
+namespace lib1
+{
+
+std::error_code get_system_code();
+std::error_code get_generic_code();
+
+} // namespace lib1
+
+namespace lib2
+{
+
+std::error_code get_system_code();
+std::error_code get_generic_code();
+
+} // namespace lib2
+
+int main()
+{
+    {
+        std::error_code e1 = lib1::get_system_code();
+        std::error_code e2 = lib2::get_system_code();
+
+        BOOST_TEST_EQ( e1, e2 );
+    }
+
+    {
+        std::error_code e1 = lib1::get_generic_code();
+        std::error_code e2 = lib2::get_generic_code();
+
+        BOOST_TEST_EQ( e1, e2 );
+    }
+
+    return boost::report_errors();
+}
+
+#endif
